package utilitiesCalculator;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Scanner;

import javafx.collections.FXCollections;

import org.apache.derby.iapi.store.raw.FetchDescriptor;

public class createDB {

	public static void main(String[] args) {

		final boolean DROP_TABLE = true;
		final boolean RESET_DATABSE = false;
		final boolean SHOW_ROW_COUNT = false;
		DatabaseUtility util = new DatabaseUtility();

		final String DB_URL = "jdbc:derby:db/UtilitiesCalc;create=true;";

		try {

			Connection conn = DriverManager.getConnection(DB_URL);
			// if(DROP_TABLE){
			// util.dropTable("tenant");
			//
			// }
			if (RESET_DATABSE) {
				createHouseTable(conn, DROP_TABLE);
				createBillMonthTable(conn, DROP_TABLE);
				createBillMonthPerTenant(conn, DROP_TABLE);
				createTenantTable(conn, DROP_TABLE);
				util.inputSampleTenantEntries();
				util.inputSampleHouseEntries();
				util.inputSampleBillMonthEntries();
				util.inputSampleBillPerTenantEntries();
			}
			
			
			String dates = "2015/09";
			int house_ID = 1;
			ArrayList<ReceiptHouseInfo> rhi = util.fetchReceiptInfoForHouse(dates, house_ID);
			System.out.println(rhi.size());
			for(int i = 0; i < rhi.size(); i++){
				System.out.printf("Electric: %.2f\n--------------------\n", 
						rhi.get(i).getElectric());
				
			}
			
//			ArrayList<ReceiptTenantInfo> tens = 
//					util.fetchReceiptInfoForTenant(util.modifyBillDate("09/2015"));
//			System.out.println(tens.size());
//			
			
			
//			String name = "Jajob jefferies";
//			String name1 = "fred butt";
//			String stuff = String.format("|%-20s|%-8s|%-5.2f|%-17s|%-5.2f|\n", name, "09/2015", .25, "Landlord", 90.45);
//			StringBuilder trial = new StringBuilder();
//			
//			String header = String.format("|%-20s|%-8s|%-5s|%-17s|%-5s|\n", "Tenant Name", "Date", "FTE", "Tenant Type", "Owed");
////			System.out.printf("|%-25s|\n", name1);
//			trial.append(header);
//			String lineBreak = "";
//			for(int i = 0; i < header.length(); i++){
//				lineBreak += "-";
//			}
//			trial.append(String.format("%s\n", lineBreak));
//			trial.append(stuff);
//			FileWriter fout = null;
//			System.out.println(trial.toString());
//			try {
//				 fout = new FileWriter(String.format("C:\\%s%s", 
//						"BillsFor", "092015.txt"));
//				 PrintWriter printMe = new PrintWriter(fout, true);
//				 printMe.println(trial);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			
			
			
			
			
			//-----------------EndTest-------------------------------------
			
			// ----------------DO NO DELETE--------------------------------
			if(SHOW_ROW_COUNT){
			String testH = String.format("SELECT * FROM house");
			System.out.println("Houses: " + util.fetchTenantSelection(testH).size());

			String testBM = String.format("SELECT * FROM billMonth");
			System.out.println("BillMonths: " + util.fetchTenantSelection(testBM).size());
			
			String testBPT = String.format("SELECT * FROM billPerTenant");
			System.out.println("BillPerTenants: " + util.fetchBillPerMonth(testBPT).size());

			String test1 = String.format("SELECT * FROM tenant");
			System.out.println("Tenants: " + util.fetchTenantSelection(test1).size());
			}
			// ----------------DO NO DELETE--------------------------------
			
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Database already exists");
		}
	}
	
	

	private static void createTenantTable(Connection conn, boolean input)
			throws SQLException {
		Statement stmt = conn.createStatement();
		if (input) {
			try {

				String dropTable = "drop table Tenant";
				stmt.execute(dropTable);
				System.out.println("Tenant table dropped.");

			} catch (Exception e) {

				System.out.println("Tenant table does not exist");
			}
		}

		String createTableSQL = "CREATE TABLE tenant ("
				+ " name varchar(100),"
				+ " active boolean,"
				+ " tenantType varchar(100),"
				+ " tenant_ID int NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
				+ " PRIMARY KEY(Tenant_ID)" + ")";

		stmt.execute(createTableSQL);
	}

	private static void createHouseTable(Connection conn, boolean input)
			throws SQLException {

		Statement stmt = conn.createStatement();
		if (input) {
			try {
				String dropTable = "drop table house";
				stmt.execute(dropTable);
				System.out.println("house table dropped.");
			} catch (Exception e) {

				System.out.println("house table does not exist");
			}
		}

		String createTableSQL = "CREATE TABLE house ("
				+ " address varchar(100),"
				+ " numRooms integer,"
				+ " sqFt integer,"
				+ " house_ID int NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
				+ " PRIMARY KEY(house_ID)" + ")";

		stmt.execute(createTableSQL);
	}

	private static void createBillMonthTable(Connection conn, boolean input)
			throws SQLException {

		Statement stmt = conn.createStatement();
		if (input) {
			try {
				String dropTable = "drop table billMonth";
				stmt.execute(dropTable);
				System.out.println("billMonth table dropped.");
			} catch (Exception e) {

				System.out.println("billMonth table does not exist");
			}
		}

		String createTableSQL = "CREATE TABLE billMonth ("
				+ " date char(7),"
				+ " fossilFuel double,"
				+ " electric double,"
				+ " other double,"
				+ " totalBill double,"
				+ " house_ID int,"
				+ " billMonth_ID int NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
				+ " PRIMARY KEY(billMonth_ID)"
				+ ")";

		stmt.execute(createTableSQL);
	}

	private static void createBillMonthPerTenant(Connection conn, boolean input)
			throws SQLException {

		Statement stmt = conn.createStatement();
		if (input) {
			try {
				String dropTable = "drop table billPerTenant";
				stmt.execute(dropTable);
				System.out.println("billPerTenant table dropped.");
			} catch (Exception e) {

				System.out.println("billPerTenant table does not exist");
			}
		}

		String createTableSQL = "CREATE TABLE billPerTenant ("
				+ " billMonth_ID integer," 
				+ " house_ID integer,"
				+ " fte double," 
				+ " bill double," 
				+ " tenant_ID integer" 
				+ ")";

		stmt.execute(createTableSQL);
	}
}
